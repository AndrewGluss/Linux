Команды Linux
$ date
выводит текущую дату и время

$ cal
выводит календарь текущего месяца

$ df
показывает объем свободного пространства на дисках

$ free
показывает объем свободного показывает в памяти

$ exit
завершение сеанса работы

$ pwd
выводит название текущего рабочего каталога

$ cd <name>
выполняет переход в другой каталог 

$ ls
выводит список содержимого каталога

$ file
определяет тип файла

$ less
выводит содержимое файла.
	Page up/b/ - прокрутка к началу на одну страницу
	Page down/Space/ - прокрутка к концу на одну страницу
	G - переход в конец файла
	1G/g - переход в начало файла
	/символы - поиск вниз по тексту до ближайшего вхождения указанной последовательности символов
	n - поиск следующего вхождения искомой последовательности символов
	h - вывод экрана со справкой
	q - завершить less

$ ls -a (--all)
выводит список всех файлов, даже с именами, начинающихся с точки (скрытые)

$ ls -A (--almost-all)
аналогичен -a, но не выводит текущий и родительский каталоги

$ ls --directory
выводит информацию о самом каталоге

$ ls --classify
добавляет в конец каждого имени символ-индификатор

$ ls --human-readable
выводит размеры файловне в байтах, а в величинах с единицами измерения

$ ls -l
выводит результаты с использованием длинного формата

$ ls -S
сортировка результатов по размеру

$ ls -t
сортировка результатов по времени последнего использования

Групповые символы
	* - любая последовательность любых символов
	? - любой один символ
	[символы] - любой один символ из указанного множества
	[!символы] - любой один символ, не принадлежащий указанному множество
	[[:класс:]] - любой один символ, принадлежащийуказанному классу
		[[:alnum:]] - любой алфавитно-цифровой символ
		[[:alpha:]] - любой алфавитный символ
		[[:digit:]] - любой цифровой символ
		[[:lower:]] - любая буква в нижнем регистре
		[[:upper:]] - любая буква в верхнем регистре
		
$ cp
копирует файлы и каталоги
	cp item1 item2
	скопировать файл/каталог item1 в файл/каталог item2

$ cp -a (--archive)
скопировать файлы и каталоги со всеми атрибутами, включая идентификаторы владельцев и права доступа.
без этого параметра копии обычно получают значения атрибутов по умолчанию, определенных для пользователя,
выполняющего копирование

$ cp -i (--interactive)
запрашивать у пользователя подтверждение перед перезаписью существующего файла.
если параметр отсутсвует команда cp просто перезапишет существующие файлы.

$ cp -r (--recursive)
рекурсивно копировать каталоги и их содержимое. 
обязательный параметр как и -a при копировании

$ cp -u (--update)
при копировании файлов из одного каталога в другой копировать только те файлы,
которые отсутствуют в каталоге назначения или более новые

$ cp -v (--verbose)
выводит информационные сообщения в процессе копирования

$ mv
перемещает/переименовывает файлы и каталоги
	mv item1 item2
	перемещает или переименовывает файл/каталог item1 в item2

$ mv -i (--interactive)
запрашивает у пользователя подтверждение перед записью

$ mv -u (--update)
при перемещении файлов из одно каталога в другой перемещать только файлы,
отсутствующие в каталоге назначения или более новые

$ mv -v (--verbose)
выводит информационные сообщения в процессе перемещения

$ mkdir
создает каталоги
	mkdir dir1
	mkdir dir1 dir2 dir3

$ rm
удаляет файлы и каталоги

$ rm -i (--interactive)
запрашивать у пользователя подтверждение перед удалением существующего файла

$ rm -r (--recursive)
рекурсивно удалать каталоги. вместе с каталогом будут удалены все подкаталоги.

$rm -f (--force)
игнорировать отсутствующие файлы и не запрашивать подтверждение
отменяет действие --interactive

$ rm -v (--verbose)
выводит информационные сообщения в процессе удаления

В LINUX НЕТ КОМАНДЫ ОТМЕНЫ УДАЛЕНИЯ!!!
 
$ ln
создает жесткие и символические ссылки

$ ln file link
создает жесткую ссылку

$ ln -s file link
создает символическую ссылкуб где элементом может быть файл и каталог

Жесткие и символические ссылки
Жесткие ссылки - первый способ создания ссылок.
По умолчанию каждый файл имеет одну жесткую ссылку, определяющую его имя.
Создавая жесткую ссылку - создаем доп. запись в каталоге файла.
Имеют два ограничения:
	ж.с. не может указывать на файл за пределами собственной файловой системы
	не може указывать на каталог
Не отличима от самого файла. При выводе списка с содержимым каталогов ж.с. никак не выделяются.
При удалении ссылки файл остается на месте, пока не будут удалены все жесткие ссылки на файл.

Символические ссылки придуманы, чтобы преодолеть ограничения жестких ссылок.
При создании с.с. в дейстыительности создается файл особого типа, содержащий текстовый указатель на файл или каталок.
Аналог ярлыки в Windows
Файл, на который указывает с.с. не отличается от самой с.с.
Если сделать запись в с.с. запись будет выполнена в сам файл.
При удалении с.с. файл остается, а если сначала удалить файл, то с.с. будет указывать в никуда - "битая" ссылка.
"Битые" ссылки выделяются красным цветом при использовании команды ls 

Команды
	выполняемая программа - скомпилированные двоичные программы C/C++, программы на языке сценариев shell, Perl, Python
	встроенная команда (shell builtins), реализованной внутри самой cli
	функция командной строки (shell function) - миниатюрные сценарии на языке cli, встроенные в окружение
	псевдоним (alias) - команда, которую можем определить сами, сконструировав из других команд

$ type команда
сообщает тип указанной команды. type - встроенная команда

$ which команда/исполняемый файл
определяет местоположение исполняемого файла. она не способна выявлять встроенные команды
или псевдонимы,замещающие фактические исполняемые программы.

$ help команда
выводит документацию на исполняемый файл

$ команда --help
вывод описание синтаксиса и параметров, поддержимаемых командой

Большинство программ, предназначенных для использования в командной строке, предоставляют официальную
документацию, которую называют страницей справочного руководства (man-страницу).
Для просмотра этих страниц есть специальная программа постраничного просмотра.

$ man программа
	заголовок (название страницы)
	краткий обзор синтаксиса команды
	описание назначения команды
	список всех параметров с их описанием
	не  включают примеры использования
Организация справочного  руководства:
	1 - пользовательские команды
	2 - программные интерфейсы системных вызовов в ядре
	3 - программные интерфейсы в библиотеке С
	4 - спец. файлы, такие как узлы устройств и драйверы
	5 - форматы файлов
	6 - игры и развлечения, таике как хранители экрана
	7 - прочее
	8 - команды системного администрирования

$ man раздел искомый_термин

$ apropos <слово>
поиск страниц справочного руководства по <слову>
команда man -k дествует аналогичным образом

$ whatis команда
выводит имя и однострочное описание из страницы сравочного руководства,
соответствующей искомому слову

$ info <команда>
выведет меню состоящую из гиперссылок на документациб для каждой команды,
входяще	 в состав пакета <команда>

$ alias <имя новой команды>='команда1; команда2; команда3;...>
создаем новую команду, которая выполняет действия других команд по порядку
чтобы проверить, что имя для новой команды не занято $ type <name>

$ unalias <имя команды>
удаления псевдонима/команды

после окончания сеанса, все созданные псевдонимы исчезают

> оператор перенаправления ввода/вывода

$ ls -l > ls-output.txt
перенаправляет список с экрана в текстовый файл

$ > имя_файла.txt
очищает содержимое уже существующего файла

>> оператор добавления в конец файла

2> перенаправления стандартного вывода ошибок в файл. указывается дескриптор файла
1 - дескриптор стандартного вывода
2 - дескриптор стандартного вывода ошибок

$ ls -l /несуществующий путь/ > ls-output.txt 2>&1
запись в один файл стандартного вывода и вывода ошибок

$ &> более простая запись

/dev/null - битоприемник или мусорная корзина, принимает любое ввод и ничегос ним не делает
туда отправляют чаще всего служебные сообщения и сообщения об ошибках

$ cat file или cat < file
читает содержимого одного или нескольких файлов и копирует их в стандартный ввод (экран)

$ cat > file
создает файл и записывает в него содержимое ввода с клавиатуры

| - оператор конвейера или оператор канала
позволяют объединить несколько команд вместе

команда1 > файл1
команда1 | команда2
команда1 > команда2 - так делать нельзя. оператор > перепишет в команду2 команду1, тем самым уничтожит команду 2

sort -  сортирует строки
uniq - ишет и удаляет дубликаты строк

$ ls путь sort | uniq | less

чтобы увидить список дубликатов uniq -d
